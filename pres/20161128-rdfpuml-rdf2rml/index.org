# -*- my-org-place: "SWIB'16, Bonn, Germany" -*-
#+TITLE: RDF by Example: rdfpuml for True RDF Diagrams, rdf2rml for R2RML Generation
#+DATE: 2016-11-29
#+AUTHOR: Vladimir Alexiev
#+EMAIL: vladimir.alexiev@ontotext.com
#+OPTIONS: ':nil *:t -:t ::t <:t H:5 \n:nil ^:{} arch:headline author:t c:nil
#+OPTIONS: creator:comment d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil stat:t tags:t tasks:t tex:t timestamp:t toc:2 todo:t |:t
#+CREATOR: Emacs 25.0.50.1 (Org mode 8.2.10)
#+DESCRIPTION: RDF is a graph data model, so the best way to understand RDF data schemas (ontologies, application profiles, RDF shapes) is with a diagram. Many RDF visualization tools exist, but they either focus on large graphs (where the details are not easily visible), or the visualization results are not satisfactory, or manual tweaking of the diagrams is required. We describe a tool *rdfpuml* that makes true diagrams directly from Turtle examples using PlantUML and GraphViz. Diagram readability is of prime concern, and rdfpuml introduces various diagram control mechanisms using triples in the puml: namespace. Special attention is paid to inlining and visualizing various Reification mechanisms (described with PRV). We give examples from Getty CONA, Getty Museum, AAC (mappings of museum data to CIDOC CRM), Multisensor (NIF and FrameNet), EHRI (Holocaust Research into Jewish social networks), Duraspace (Portland Common Data Model for holding metadata in institutional repositories), Video annotation. If the example instances include SQL queries and embedded field names, they can describe a mapping precisely. Another tool *rdf2rdb* generates R2RML transformations from such examples, saving about 15x in complexity.
#+LANGUAGE: en
#+STARTUP: showeverything

* Motivation
RDF is a graph data model:
- The best way to understand RDF data schemas (ontologies, application profiles, RDF shapes) is with a diagram.
- Many RDF visualization tools exist, but they either
  - Focus on large graphs (where the details are not easily visible), or 
  - Visualization results are not satisfactory, or 
  - Manual tweaking of the diagrams is required

Developed a tool *rdfpuml* that makes *true* diagrams directly from Turtle examples
- Uses [[http://www.plantuml.com][PlantUML]] and [[http://www.graphviz.org][GraphViz]]

Benefits:
- Guarantees consistency between said (triple statements) and shown (diagram)
- Lets you focus on domain modeling rather than diagram layouting/tweaking
- Enables efficient source control
- Saves you lots of effort
 
** Simple Example: Getty CONA: Object Discovery
Source Turtle (~puml:~ are diagram control triples, explained further)
#+BEGIN_SRC Turtle
cona:456-thing crm:P12i_was_present_at cona:456-discovery-123.
cona:456-discovery-123 a crmx:Discovery;
  crm:P2_has_type <cona/production/discovery>;
  crm:P4_has_time-span cona:456-discovery-123-date.
cona:456-discovery-123-date a crm:E52_Time-Span;
  crm:P82a_begin_of_the_begin "1800"^^xsd:gYear;
  crm:P82b_end_of_the_end "1850"^^xsd:gYear.
########################################
<cona/production/discovery> a puml:Inline.
#+END_SRC
#+ATTR_HTML: :class stretch :style width:500px
[[./img/CONA-production-discovery-Simple.png]]

** Simple Example: Generated PlantUML
Takes care of many hairy details, eg node name sanitization, collecting property names & values, inlining, Reification/Association, replacing ~()~ with ~[]~ (puml quirk)...
#+BEGIN_SRC plantuml :exports code
@startuml
hide empty methods
hide empty attributes
hide circle
skinparam classAttributeIconSize 0
class cona_456_discovery_123 as "cona:456-discovery-123"
cona_456_discovery_123 : a crmx:Discovery
class cona_456_discovery_123_date as "cona:456-discovery-123-date"
cona_456_discovery_123 --> cona_456_discovery_123_date : crm:P4_has_time-span
cona_456_discovery_123 : crm:P2_has_type cona:production/discovery
cona_456_discovery_123_date : a crm:E52_Time-Span
cona_456_discovery_123_date : crm:P82a_begin_of_the_begin "1800"^^xsd:gYear
cona_456_discovery_123_date : crm:P82b_end_of_the_end "1850"^^xsd:gYear
class cona_456_thing as "cona:456-thing"
cona_456_thing --> cona_456_discovery_123 : crm:P12i_was_present_at
@enduml
#+END_SRC

* Diagram Features
Diagram readability is a prime concern. Some measures:
- Shorten URLs aggressively. Some prefixed names you see in the diagram are not valid Turtle
- Sort properties by name (~rdf:type~ comes first)
- Show literal types, use Turtle shortcuts (eg 1 instead of "1"^^xsd:integer)
- Collect property values together; collect "parallel" properties together
- Inlining: show object in the subject node, not as separate node
  - Types and literals are inlined automatically
  - Inline resource (optional label): used often for lookup values
    : <cona/event/competition> a puml:Inline.
    : cona_contrib:10000000 a puml:Inline; rdfs:label "VP".
  - Inline property: show all objects of a property inlined
    : fn:annotationSetFrame a puml:InlineProperty. 
- Namespace ~puml:~ used for diagram control (usually written after ~####~)
  - Follows Dan Connolly's approach [[https://www.w3.org/2001/02pd/][Circles and arrows diagrams using stylesheet rules]] (W3C 2005)

** Collect "Parallel" Property Names
- Multiple property instances between nodes are collected in one arrow and shown as several labels
- Inverse arrows work fine
#+ATTR_HTML: :class stretch :style width:900px
[[./img/CONA-arel-replaced-MultipleArrowLabels.png]]

** Arrow Customization
Customize arrow for one relation or all prop instances
#+BEGIN_SRC Turtle
<subj> puml:$dir-$head-$line <obj> .
<prop> puml:arrow puml:$dir-$head-$line .
#+END_SRC
- ~$dir~: left, right, up, down (default)
- ~$head~: none="", tri="|>", star="*", o="o" (default=normal arrow)
- ~$line~: dashed (default is solid)
- Each part is optional. Example:
#+BEGIN_SRC Turtle
cona:456-production puml:left cona:456-motivation-123.
#+END_SRC
#+ATTR_HTML: :class stretch :style width:1000px
[[./img/CONA-production-motivation-ArrowDir.png]]

** Stereotypes and Colored Circles
[[https://en.wikipedia.org/wiki/Stereotype_(UML)][Stereotype]]: UML lingo for /«guillemetted name»/ and colored circle.
- Set on individual node or whole class
#+BEGIN_SRC Turtle
iso:ThesaurusArray puml:stereotype "(A,red)".
gvp:GuideTerm      puml:stereotype "(G,green)".
gvp:Concept        puml:stereotype "(C,lightblue)".
#+END_SRC
#+ATTR_HTML: :class stretch :style width:400px
[[./img/GVP-ordered-collection-Stereotype.png]]

** Reification
- ~<s> <p> <o>~ represented as node with 3 addressing props plus extra data
#+BEGIN_SRC Turtle
<node> a <ReificationClass>;
  <subjectProp>  <s>;
  <shortcutProp> <p>;
  <objectProp>   <o>;
  # extra data, eg dct:created, dct:creator
#+END_SRC
- RDF Reification is used most often (~rdf:Statement~)
- CIDOC CRM (with extension ~crmx:property~ or ~bmo:PX_property~)
- [[http://smiy.sourceforge.net/prv/spec/propertyreification.html][Property Reification Vocabulary]] allows us to express this data formally:
| ReificationClass               | subjectProp                     | shortcutProp  | objectProp                           | prop (shortcut)                             |
|--------------------------------+---------------------------------+---------------+--------------------------------------+---------------------------------------------|
| rdf:Statement                  | rdf:subject                     | rdf:predicate | rdf:object                           | any prop                                    |
| crm:E13_Attribute _Assignment  | crm:P140_assigned _attribute_to | crmx:property | crm:P141_assigned                    | any CRM prop                                |
| crm:E14_Condition _Assessment  | crm:P34_concerned               | crmx:property | crm:P35_has_identified               | crm:P44_has_condition                       |
| crm:E15_Identifier _Assignment | crm:P140_assigned _attribute_to | crmx:property | crm:P37_assigned, crm:P38_deassigned | crm:P1_is_identified_by, crm:P102_has_title |
| crm:E16_Measurement            | crm:P39_measured                | crmx:property | crm:P40_observed _dimension          | crm:P43_has_dimension                       |
| crm:E17_Type _Assignment       | crm:P41_classified              | crmx:property | crm:P42_assigned                     | crm:P2_has_type or subprop                  |

** Reification Nodes
- Automatically discover reifications as per the previous table and make [[http://plantuml.com/classes.html#Association_classes][PlantUML Association Class]]
- Show addressing properties with arrows (← : →) pointing to the subject, shortcut, object
- Limit: no more than 2 reifications per relation (and the second one is ugly). So use ~puml:noReify~ to avoid making reification
#+ATTR_HTML: :class stretch :style width:1000px
[[./img/CONA-arel-Reification.png]]

* Examples: Getty CONA: Contribs and Sources 
Aggressive URL shortening, collecting multiple values, value comments
#+ATTR_HTML: :class stretch :style width:1350px
[[./img/CONA-contribs-sources.png]]

** Getty CONA: Iconographic Authority
Arrow direction, reification
#+ATTR_HTML: :class stretch :style width:1500px
[[./img/CONA-ia_hercules-Complex.png]]

** American Art Collaborative: Mapping Museum Data to CIDOC CRM
One option how to map "cast after" (from the same mold)
#+ATTR_HTML: :class stretch :style width:1256px
[[./img/AAC-NPG-castAfter.png]]

** FRBRoo: Don Quixote Example (Europeana EFAP Task Force) 
#+ATTR_HTML: :class stretch :style width:1320px
[[./img/FRBRoo-DonQuixote.png]]

** EHRI: Person Network
Jewish social networks: CIDOC CRM and AgRelOn
#+ATTR_HTML: :class stretch :style width:1300px
[[./img/EHRI-person-network.png]]

** Multisensor: Video Annotation & Text Annotation (NIF) 
#+ATTR_HTML: :class stretch :style width:800px
[[./img/MS-video-and-text-NIF.png]]

*** Multisensor: Social Network Analysis
Global influence and reachability 
#+ATTR_HTML: :class stretch :style width:900px
[[./img/MS-social-network.png]]

*** Multisensor: Image Annotation with OpenAnnotation+FISE
FISE (Stanbol) is used to express Confidence
#+ATTR_HTML: :class stretch :style width:1400px
[[./img/MS-OpenAnnotation-and-Stanbol-FISE.png]]

*** Multisensor: News Item and its Translation
Stereotypes (circle, /«italic»/), arrow direction
#+ATTR_HTML: :class stretch :style width:1200px
[[./img/MS-translation.png]]

*** Multisensor: FrameNet Embedded in NIF
Made with PlantUML "by hand", not rdfpuml. Uses [[http://plantuml.com/classes.html#Using][PlantUML Packages]]
#+ATTR_HTML: :class stretch :style width:950px
[[./img/MS-FrameNet-Embedding-in-NIF.png]]

*** Multisensor: FrameNet+NIF (Part 1)
#+ATTR_HTML: :class stretch :style width:1500px
[[./img/MS-Frame-complex-part1.png]]

*** Multisensor: FrameNet+NIF (Part 2)
#+ATTR_HTML: :class stretch :style width:1500px
[[./img/MS-Frame-complex-part2.png]]

** OpenAnnotation: Example 44
Blank nodes, RDF lists
#+ATTR_HTML: :class stretch :style width:1300px
[[./img/OA-eg44.png]]

** Duraspace PCDM Metadata
- [[https://github.com/duraspace/pcdm/wiki][Portland Common Data Model]] for diglib metadata (Fedora, Islandora..)
- [[https://wiki.duraspace.org/display/FF/PCDM%2BMappings%2B-%2BReference%2BDiagrams%2Bfor%2BComment][Reference Diagrams]] made by hand, takes a lot of time (eg [[https://docs.google.com/drawings/d/1nhwbFqQY_dEOTuHwgXMZIt79pZ4kfa2_DFN5LFOz9Qs/edit][Postcard]])
- Proposed [[https://github.com/duraspace/pcdm/wiki/Diagrams-with-rdfpuml][diagrams with rdfpuml]] (tracked as [[https://github.com/duraspace/pcdm/issues/46][duraspace/pcdm#46]])
#+ATTR_HTML: :class stretch :style width:1300px
[[./img/PCDM_Multi_Page_Text-circles.png]]

** Video Annotation: LinkedTV NISV Use Case
#+ATTR_HTML: :class stretch :style width:1400px
[[./img/LinkedTV-Fig22-NISV-scenario.png]]

*** Video Annotation: Generated Diagram
#+ATTR_HTML: :class stretch :style width:1400px
[[./img/linkedtv-nisv.png]]

** ICIJ Offshore Leaks (RDF by Ontotext)
#+ATTR_HTML: :class stretch :style width:550px
[[./img/leaks-model.png]]

** Offshore Leaks Evolution
[[https://github.com/Ontotext-AD/leaks/commit/3ef04ff99751247dfc876295cce54264259085e8#diff-76e7f343443a2e76fcadc0fcba335d2d][Model is evolving]] as we unravel more of the data (github "image diff")
#+ATTR_HTML: :class stretch :style width:1000px
[[./img/leaks-model-evolution.png]]

* R2RML Generation
R2RML is the W3C standard for RDBMS->RDF conversion
- It is quite verbose and requires semantic experience to write
- What if we could describe RDBMS mapping in our examples?
- We can: include SQL queries and embedded field names
*rdf2rdb* generates R2RML transformations from examples:
- Saves about 15x in complexity
- Ensures consistency of model and actual conversion

** Getty Museum: Exhibitions Model
#+ATTR_HTML: :class stretch :style width:1400px
[[./img/exhibitions.png]]

*** Getty Exhibitions: Generated R2RML
#+ATTR_HTML: :class stretch :style width:2200px
[[./img/exhibitions.r2rml.png]]

*** Getty Exhibitions: Relational Data
#+BEGIN_COMMENT
conaddress
|conaddressid| constituentid| address|
|101| 1| 'Getty Drive'|
|102| 2| 'MoMA Street' |
|103| 3| 'LACMA County'|
conxrefs
|tableid| roleid| id| constituentid|
|47| 286| 123| 1|
#+END_COMMENT
constituents
|constituentid| constituent|
|1| 'Getty Museum'|
|2| 'MoMA'|
|3| 'LACMA'|
exhibitions
| exhibitionid | exhdepartment | exhtitle                 | displaydate    | beginisodate | endisodate   |
|          123 |            53 | 'Getty through the ages' | 'October 2016' | '2016-10-01' | '2016-10-30' |
exhvenuesxrefs
| exhvenxref | exhid | conid | conaddrid | approved | dispord | displaydate      | beginisodate | endisodate   |
|        202 |   123 |     2 |       102 |        1 |       1 | 'Early Oct 2016' | '2016-10-01' | '2016-10-15' |
|        203 |   123 |     3 |       103 |        1 |       2 | 'Late Oct 2016'  | '2016-10-16' | '2016-10-30' |
exhvenobjxrefs
| exhvenuexrefid | objectid | catalognumber | begindispldateiso | enddispldateiso | displayed |
|            202 |     1001 | 'cat 1001'    | '2016-10-01'      | '2016-10-15'    |         1 |
|            203 |     1001 | 'cat 1001'    | '2016-10-16'      | '2016-10-30'    |         1 |
|            202 |     1002 | 'cat 1002'    | '2016-10-01'      | '2016-10-15'    |         1 |

*** Getty Exhibitions: Converted RDF Data
#+ATTR_HTML: :class stretch :style width:1500px
[[./img/exhibitions-out.png]]

** Getty Museum: Museum Object
#+ATTR_HTML: :class stretch :style width:1300px
[[./img/JPGM-objects.png]]

* Future Work
R2RML works great for RDBMS, but how about other sources?

Working to extend *rdf2rml* to generate:
- [[http://rml.io][RML:]] extends R2RML to handle RDB, XML, JSON, CSV
- [[http://github.com/semantalytics/xsparql][XSPARQL:]] extends XQuery with SPARQL construct and JSON input
- [[https://tarql.github.io/][tarql]]: handles TSV/CSV with SPARQL construct

** ClinicalTrials.gov: Clinical Study Results (XML)
#+ATTR_HTML: :class stretch :style width:1057px
[[./img/CT.png]]

** Dun & Bradstreet (Fix-Width) to Fin. Ind. Business Ontology
#+ATTR_HTML: :class stretch :style width:1135px
[[./img/DnB-bussf.png]]

** Global Legal Entity Indentifier (XML) to FIBO
#+ATTR_HTML: :class stretch :style width:1300px
[[./img/GLEI-FIBO.png]]

** Farther Future
- Modularize & package better
- Integrate in Emacs org-mode: write Turtle, see diagram
- Extend RDF by Example to describe & generate RDF Shapes
- Another tool to visualize RDF Shapes (SHACL and Shex)
